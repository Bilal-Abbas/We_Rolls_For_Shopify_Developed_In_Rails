/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/scripts/adminlte.js":
/*!*********************************!*\
  !*** ./src/scripts/adminlte.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! AdminLTE app.js\n* ================\n* Main JS application file for AdminLTE v2. This file\n* should be included in all pages. It controls some layout\n* options and implements exclusive AdminLTE plugins.\n*\n* @Author  Almsaeed Studio\n* @Support <https://www.almsaeedstudio.com>\n* @Email   <abdullah@almsaeedstudio.com>\n* @version 2.4.5\n* @repository git://github.com/almasaeed2010/AdminLTE.git\n* @license MIT <http://opensource.org/licenses/MIT>\n*/\n// Make sure jQuery has been loaded\nif (typeof jQuery === 'undefined') {\n  throw new Error('AdminLTE requires jQuery');\n}\n/* BoxRefresh()\n * =========\n * Adds AJAX content control to a box.\n *\n * @Usage: $('#my-box').boxRefresh(options)\n *         or add [data-widget=\"box-refresh\"] to the box element\n *         Pass any option as data-option=\"value\"\n */\n\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.boxrefresh';\n  var Default = {\n    source: '',\n    params: {},\n    trigger: '.refresh-btn',\n    content: '.box-body',\n    loadInContent: true,\n    responseType: '',\n    overlayTemplate: '<div class=\"overlay\"><div class=\"fa fa-refresh fa-spin\"></div></div>',\n    onLoadStart: function () {},\n    onLoadDone: function (response) {\n      return response;\n    }\n  };\n  var Selector = {\n    data: '[data-widget=\"box-refresh\"]'\n  }; // BoxRefresh Class Definition\n  // =========================\n\n  var BoxRefresh = function (element, options) {\n    this.element = element;\n    this.options = options;\n    this.$overlay = $(options.overlay);\n\n    if (options.source === '') {\n      throw new Error('Source url was not defined. Please specify a url in your BoxRefresh source option.');\n    }\n\n    this._setUpListeners();\n\n    this.load();\n  };\n\n  BoxRefresh.prototype.load = function () {\n    this._addOverlay();\n\n    this.options.onLoadStart.call($(this));\n    $.get(this.options.source, this.options.params, function (response) {\n      if (this.options.loadInContent) {\n        $(this.options.content).html(response);\n      }\n\n      this.options.onLoadDone.call($(this), response);\n\n      this._removeOverlay();\n    }.bind(this), this.options.responseType !== '' && this.options.responseType);\n  }; // Private\n\n\n  BoxRefresh.prototype._setUpListeners = function () {\n    $(this.element).on('click', Selector.trigger, function (event) {\n      if (event) event.preventDefault();\n      this.load();\n    }.bind(this));\n  };\n\n  BoxRefresh.prototype._addOverlay = function () {\n    $(this.element).append(this.$overlay);\n  };\n\n  BoxRefresh.prototype._removeOverlay = function () {\n    $(this.element).remove(this.$overlay);\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);\n        $this.data(DataKey, data = new BoxRefresh($this, options));\n      }\n\n      if (typeof data == 'string') {\n        if (typeof data[option] == 'undefined') {\n          throw new Error('No method named ' + option);\n        }\n\n        data[option]();\n      }\n    });\n  }\n\n  var old = $.fn.boxRefresh;\n  $.fn.boxRefresh = Plugin;\n  $.fn.boxRefresh.Constructor = BoxRefresh; // No Conflict Mode\n  // ================\n\n  $.fn.boxRefresh.noConflict = function () {\n    $.fn.boxRefresh = old;\n    return this;\n  }; // BoxRefresh Data API\n  // =================\n\n\n  $(window).on('load', function () {\n    $(Selector.data).each(function () {\n      Plugin.call($(this));\n    });\n  });\n}(jQuery);\n/* BoxWidget()\n * ======\n * Adds box widget functions to boxes.\n *\n * @Usage: $('.my-box').boxWidget(options)\n *         This plugin auto activates on any element using the `.box` class\n *         Pass any option as data-option=\"value\"\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.boxwidget';\n  var Default = {\n    animationSpeed: 500,\n    collapseTrigger: '[data-widget=\"collapse\"]',\n    removeTrigger: '[data-widget=\"remove\"]',\n    collapseIcon: 'fa-minus',\n    expandIcon: 'fa-plus',\n    removeIcon: 'fa-times'\n  };\n  var Selector = {\n    data: '.box',\n    collapsed: '.collapsed-box',\n    header: '.box-header',\n    body: '.box-body',\n    footer: '.box-footer',\n    tools: '.box-tools'\n  };\n  var ClassName = {\n    collapsed: 'collapsed-box'\n  };\n  var Event = {\n    collapsed: 'collapsed.boxwidget',\n    expanded: 'expanded.boxwidget',\n    removed: 'removed.boxwidget'\n  }; // BoxWidget Class Definition\n  // =====================\n\n  var BoxWidget = function (element, options) {\n    this.element = element;\n    this.options = options;\n\n    this._setUpListeners();\n  };\n\n  BoxWidget.prototype.toggle = function () {\n    var isOpen = !$(this.element).is(Selector.collapsed);\n\n    if (isOpen) {\n      this.collapse();\n    } else {\n      this.expand();\n    }\n  };\n\n  BoxWidget.prototype.expand = function () {\n    var expandedEvent = $.Event(Event.expanded);\n    var collapseIcon = this.options.collapseIcon;\n    var expandIcon = this.options.expandIcon;\n    $(this.element).removeClass(ClassName.collapsed);\n    $(this.element).children(Selector.header + ', ' + Selector.body + ', ' + Selector.footer).children(Selector.tools).find('.' + expandIcon).removeClass(expandIcon).addClass(collapseIcon);\n    $(this.element).children(Selector.body + ', ' + Selector.footer).slideDown(this.options.animationSpeed, function () {\n      $(this.element).trigger(expandedEvent);\n    }.bind(this));\n  };\n\n  BoxWidget.prototype.collapse = function () {\n    var collapsedEvent = $.Event(Event.collapsed);\n    var collapseIcon = this.options.collapseIcon;\n    var expandIcon = this.options.expandIcon;\n    $(this.element).children(Selector.header + ', ' + Selector.body + ', ' + Selector.footer).children(Selector.tools).find('.' + collapseIcon).removeClass(collapseIcon).addClass(expandIcon);\n    $(this.element).children(Selector.body + ', ' + Selector.footer).slideUp(this.options.animationSpeed, function () {\n      $(this.element).addClass(ClassName.collapsed);\n      $(this.element).trigger(collapsedEvent);\n    }.bind(this));\n  };\n\n  BoxWidget.prototype.remove = function () {\n    var removedEvent = $.Event(Event.removed);\n    $(this.element).slideUp(this.options.animationSpeed, function () {\n      $(this.element).trigger(removedEvent);\n      $(this.element).remove();\n    }.bind(this));\n  }; // Private\n\n\n  BoxWidget.prototype._setUpListeners = function () {\n    var that = this;\n    $(this.element).on('click', this.options.collapseTrigger, function (event) {\n      if (event) event.preventDefault();\n      that.toggle($(this));\n      return false;\n    });\n    $(this.element).on('click', this.options.removeTrigger, function (event) {\n      if (event) event.preventDefault();\n      that.remove($(this));\n      return false;\n    });\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);\n        $this.data(DataKey, data = new BoxWidget($this, options));\n      }\n\n      if (typeof option == 'string') {\n        if (typeof data[option] == 'undefined') {\n          throw new Error('No method named ' + option);\n        }\n\n        data[option]();\n      }\n    });\n  }\n\n  var old = $.fn.boxWidget;\n  $.fn.boxWidget = Plugin;\n  $.fn.boxWidget.Constructor = BoxWidget; // No Conflict Mode\n  // ================\n\n  $.fn.boxWidget.noConflict = function () {\n    $.fn.boxWidget = old;\n    return this;\n  }; // BoxWidget Data API\n  // ==================\n\n\n  $(window).on('load', function () {\n    $(Selector.data).each(function () {\n      Plugin.call($(this));\n    });\n  });\n}(jQuery);\n/* ControlSidebar()\n * ===============\n * Toggles the state of the control sidebar\n *\n * @Usage: $('#control-sidebar-trigger').controlSidebar(options)\n *         or add [data-toggle=\"control-sidebar\"] to the trigger\n *         Pass any option as data-option=\"value\"\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.controlsidebar';\n  var Default = {\n    slide: true\n  };\n  var Selector = {\n    sidebar: '.control-sidebar',\n    data: '[data-toggle=\"control-sidebar\"]',\n    open: '.control-sidebar-open',\n    bg: '.control-sidebar-bg',\n    wrapper: '.wrapper',\n    content: '.content-wrapper',\n    boxed: '.layout-boxed'\n  };\n  var ClassName = {\n    open: 'control-sidebar-open',\n    fixed: 'fixed'\n  };\n  var Event = {\n    collapsed: 'collapsed.controlsidebar',\n    expanded: 'expanded.controlsidebar'\n  }; // ControlSidebar Class Definition\n  // ===============================\n\n  var ControlSidebar = function (element, options) {\n    this.element = element;\n    this.options = options;\n    this.hasBindedResize = false;\n    this.init();\n  };\n\n  ControlSidebar.prototype.init = function () {\n    // Add click listener if the element hasn't been\n    // initialized using the data API\n    if (!$(this.element).is(Selector.data)) {\n      $(this).on('click', this.toggle);\n    }\n\n    this.fix();\n    $(window).resize(function () {\n      this.fix();\n    }.bind(this));\n  };\n\n  ControlSidebar.prototype.toggle = function (event) {\n    if (event) event.preventDefault();\n    this.fix();\n\n    if (!$(Selector.sidebar).is(Selector.open) && !$('body').is(Selector.open)) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  };\n\n  ControlSidebar.prototype.expand = function () {\n    if (!this.options.slide) {\n      $('body').addClass(ClassName.open);\n    } else {\n      $(Selector.sidebar).addClass(ClassName.open);\n    }\n\n    $(this.element).trigger($.Event(Event.expanded));\n  };\n\n  ControlSidebar.prototype.collapse = function () {\n    $('body, ' + Selector.sidebar).removeClass(ClassName.open);\n    $(this.element).trigger($.Event(Event.collapsed));\n  };\n\n  ControlSidebar.prototype.fix = function () {\n    if ($('body').is(Selector.boxed)) {\n      this._fixForBoxed($(Selector.bg));\n    }\n  }; // Private\n\n\n  ControlSidebar.prototype._fixForBoxed = function (bg) {\n    bg.css({\n      position: 'absolute',\n      height: $(Selector.wrapper).height()\n    });\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);\n        $this.data(DataKey, data = new ControlSidebar($this, options));\n      }\n\n      if (typeof option == 'string') data.toggle();\n    });\n  }\n\n  var old = $.fn.controlSidebar;\n  $.fn.controlSidebar = Plugin;\n  $.fn.controlSidebar.Constructor = ControlSidebar; // No Conflict Mode\n  // ================\n\n  $.fn.controlSidebar.noConflict = function () {\n    $.fn.controlSidebar = old;\n    return this;\n  }; // ControlSidebar Data API\n  // =======================\n\n\n  $(document).on('click', Selector.data, function (event) {\n    if (event) event.preventDefault();\n    Plugin.call($(this), 'toggle');\n  });\n}(jQuery);\n/* DirectChat()\n * ===============\n * Toggles the state of the control sidebar\n *\n * @Usage: $('#my-chat-box').directChat()\n *         or add [data-widget=\"direct-chat\"] to the trigger\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.directchat';\n  var Selector = {\n    data: '[data-widget=\"chat-pane-toggle\"]',\n    box: '.direct-chat'\n  };\n  var ClassName = {\n    open: 'direct-chat-contacts-open'\n  }; // DirectChat Class Definition\n  // ===========================\n\n  var DirectChat = function (element) {\n    this.element = element;\n  };\n\n  DirectChat.prototype.toggle = function ($trigger) {\n    $trigger.parents(Selector.box).first().toggleClass(ClassName.open);\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        $this.data(DataKey, data = new DirectChat($this));\n      }\n\n      if (typeof option == 'string') data.toggle($this);\n    });\n  }\n\n  var old = $.fn.directChat;\n  $.fn.directChat = Plugin;\n  $.fn.directChat.Constructor = DirectChat; // No Conflict Mode\n  // ================\n\n  $.fn.directChat.noConflict = function () {\n    $.fn.directChat = old;\n    return this;\n  }; // DirectChat Data API\n  // ===================\n\n\n  $(document).on('click', Selector.data, function (event) {\n    if (event) event.preventDefault();\n    Plugin.call($(this), 'toggle');\n  });\n}(jQuery);\n/* Layout()\n * ========\n * Implements AdminLTE layout.\n * Fixes the layout height in case min-height fails.\n *\n * @usage activated automatically upon window load.\n *        Configure any options by passing data-option=\"value\"\n *        to the body tag.\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.layout';\n  var Default = {\n    slimscroll: true,\n    resetHeight: true\n  };\n  var Selector = {\n    wrapper: '.wrapper',\n    contentWrapper: '.content-wrapper',\n    layoutBoxed: '.layout-boxed',\n    mainFooter: '.main-footer',\n    mainHeader: '.main-header',\n    sidebar: '.sidebar',\n    controlSidebar: '.control-sidebar',\n    fixed: '.fixed',\n    sidebarMenu: '.sidebar-menu',\n    logo: '.main-header .logo'\n  };\n  var ClassName = {\n    fixed: 'fixed',\n    holdTransition: 'hold-transition'\n  };\n\n  var Layout = function (options) {\n    this.options = options;\n    this.bindedResize = false;\n    this.activate();\n  };\n\n  Layout.prototype.activate = function () {\n    this.fix();\n    this.fixSidebar();\n    $('body').removeClass(ClassName.holdTransition);\n\n    if (this.options.resetHeight) {\n      $('body, html, ' + Selector.wrapper).css({\n        'height': 'auto',\n        'min-height': '100%'\n      });\n    }\n\n    if (!this.bindedResize) {\n      $(window).resize(function () {\n        this.fix();\n        this.fixSidebar();\n        $(Selector.logo + ', ' + Selector.sidebar).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function () {\n          this.fix();\n          this.fixSidebar();\n        }.bind(this));\n      }.bind(this));\n      this.bindedResize = true;\n    }\n\n    $(Selector.sidebarMenu).on('expanded.tree', function () {\n      this.fix();\n      this.fixSidebar();\n    }.bind(this));\n    $(Selector.sidebarMenu).on('collapsed.tree', function () {\n      this.fix();\n      this.fixSidebar();\n    }.bind(this));\n  };\n\n  Layout.prototype.fix = function () {\n    // Remove overflow from .wrapper if layout-boxed exists\n    $(Selector.layoutBoxed + ' > ' + Selector.wrapper).css('overflow', 'hidden'); // Get window height and the wrapper height\n\n    var footerHeight = $(Selector.mainFooter).outerHeight() || 0;\n    var headerHeight = $(Selector.mainHeader).outerHeight() || 0;\n    var neg = headerHeight + footerHeight;\n    var windowHeight = $(window).height();\n    var sidebarHeight = $(Selector.sidebar).height() || 0; // Set the min-height of the content and sidebar based on\n    // the height of the document.\n\n    if ($('body').hasClass(ClassName.fixed)) {\n      $(Selector.contentWrapper).css('min-height', windowHeight - footerHeight);\n    } else {\n      var postSetHeight;\n\n      if (windowHeight >= sidebarHeight) {\n        $(Selector.contentWrapper).css('min-height', windowHeight - neg);\n        postSetHeight = windowHeight - neg;\n      } else {\n        $(Selector.contentWrapper).css('min-height', sidebarHeight);\n        postSetHeight = sidebarHeight;\n      } // Fix for the control sidebar height\n\n\n      var $controlSidebar = $(Selector.controlSidebar);\n\n      if (typeof $controlSidebar !== 'undefined') {\n        if ($controlSidebar.height() > postSetHeight) $(Selector.contentWrapper).css('min-height', $controlSidebar.height());\n      }\n    }\n  };\n\n  Layout.prototype.fixSidebar = function () {\n    // Make sure the body tag has the .fixed class\n    if (!$('body').hasClass(ClassName.fixed)) {\n      if (typeof $.fn.slimScroll !== 'undefined') {\n        $(Selector.sidebar).slimScroll({\n          destroy: true\n        }).height('auto');\n      }\n\n      return;\n    } // Enable slimscroll for fixed layout\n\n\n    if (this.options.slimscroll) {\n      if (typeof $.fn.slimScroll !== 'undefined') {\n        // Destroy if it exists\n        // $(Selector.sidebar).slimScroll({ destroy: true }).height('auto')\n        // Add slimscroll\n        $(Selector.sidebar).slimScroll({\n          height: $(window).height() - $(Selector.mainHeader).height() + 'px'\n        });\n      }\n    }\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option === 'object' && option);\n        $this.data(DataKey, data = new Layout(options));\n      }\n\n      if (typeof option === 'string') {\n        if (typeof data[option] === 'undefined') {\n          throw new Error('No method named ' + option);\n        }\n\n        data[option]();\n      }\n    });\n  }\n\n  var old = $.fn.layout;\n  $.fn.layout = Plugin;\n  $.fn.layout.Constuctor = Layout; // No conflict mode\n  // ================\n\n  $.fn.layout.noConflict = function () {\n    $.fn.layout = old;\n    return this;\n  }; // Layout DATA-API\n  // ===============\n\n\n  $(window).on('load', function () {\n    Plugin.call($('body'));\n  });\n}(jQuery);\n/* PushMenu()\n * ==========\n * Adds the push menu functionality to the sidebar.\n *\n * @usage: $('.btn').pushMenu(options)\n *          or add [data-toggle=\"push-menu\"] to any button\n *          Pass any option as data-option=\"value\"\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.pushmenu';\n  var Default = {\n    collapseScreenSize: 767,\n    expandOnHover: false,\n    expandTransitionDelay: 200\n  };\n  var Selector = {\n    collapsed: '.sidebar-collapse',\n    open: '.sidebar-open',\n    mainSidebar: '.main-sidebar',\n    contentWrapper: '.content-wrapper',\n    searchInput: '.sidebar-form .form-control',\n    button: '[data-toggle=\"push-menu\"]',\n    mini: '.sidebar-mini',\n    expanded: '.sidebar-expanded-on-hover',\n    layoutFixed: '.fixed'\n  };\n  var ClassName = {\n    collapsed: 'sidebar-collapse',\n    open: 'sidebar-open',\n    mini: 'sidebar-mini',\n    expanded: 'sidebar-expanded-on-hover',\n    expandFeature: 'sidebar-mini-expand-feature',\n    layoutFixed: 'fixed'\n  };\n  var Event = {\n    expanded: 'expanded.pushMenu',\n    collapsed: 'collapsed.pushMenu'\n  }; // PushMenu Class Definition\n  // =========================\n\n  var PushMenu = function (options) {\n    this.options = options;\n    this.init();\n  };\n\n  PushMenu.prototype.init = function () {\n    if (this.options.expandOnHover || $('body').is(Selector.mini + Selector.layoutFixed)) {\n      this.expandOnHover();\n      $('body').addClass(ClassName.expandFeature);\n    }\n\n    $(Selector.contentWrapper).click(function () {\n      // Enable hide menu when clicking on the content-wrapper on small screens\n      if ($(window).width() <= this.options.collapseScreenSize && $('body').hasClass(ClassName.open)) {\n        this.close();\n      }\n    }.bind(this)); // __Fix for android devices\n\n    $(Selector.searchInput).click(function (e) {\n      e.stopPropagation();\n    });\n  };\n\n  PushMenu.prototype.toggle = function () {\n    var windowWidth = $(window).width();\n    var isOpen = !$('body').hasClass(ClassName.collapsed);\n\n    if (windowWidth <= this.options.collapseScreenSize) {\n      isOpen = $('body').hasClass(ClassName.open);\n    }\n\n    if (!isOpen) {\n      this.open();\n    } else {\n      this.close();\n    }\n  };\n\n  PushMenu.prototype.open = function () {\n    var windowWidth = $(window).width();\n\n    if (windowWidth > this.options.collapseScreenSize) {\n      $('body').removeClass(ClassName.collapsed).trigger($.Event(Event.expanded));\n    } else {\n      $('body').addClass(ClassName.open).trigger($.Event(Event.expanded));\n    }\n  };\n\n  PushMenu.prototype.close = function () {\n    var windowWidth = $(window).width();\n\n    if (windowWidth > this.options.collapseScreenSize) {\n      $('body').addClass(ClassName.collapsed).trigger($.Event(Event.collapsed));\n    } else {\n      $('body').removeClass(ClassName.open + ' ' + ClassName.collapsed).trigger($.Event(Event.collapsed));\n    }\n  };\n\n  PushMenu.prototype.expandOnHover = function () {\n    $(Selector.mainSidebar).hover(function () {\n      if ($('body').is(Selector.mini + Selector.collapsed) && $(window).width() > this.options.collapseScreenSize) {\n        this.expand();\n      }\n    }.bind(this), function () {\n      if ($('body').is(Selector.expanded)) {\n        this.collapse();\n      }\n    }.bind(this));\n  };\n\n  PushMenu.prototype.expand = function () {\n    setTimeout(function () {\n      $('body').removeClass(ClassName.collapsed).addClass(ClassName.expanded);\n    }, this.options.expandTransitionDelay);\n  };\n\n  PushMenu.prototype.collapse = function () {\n    setTimeout(function () {\n      $('body').removeClass(ClassName.expanded).addClass(ClassName.collapsed);\n    }, this.options.expandTransitionDelay);\n  }; // PushMenu Plugin Definition\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);\n        $this.data(DataKey, data = new PushMenu(options));\n      }\n\n      if (option === 'toggle') data.toggle();\n    });\n  }\n\n  var old = $.fn.pushMenu;\n  $.fn.pushMenu = Plugin;\n  $.fn.pushMenu.Constructor = PushMenu; // No Conflict Mode\n  // ================\n\n  $.fn.pushMenu.noConflict = function () {\n    $.fn.pushMenu = old;\n    return this;\n  }; // Data API\n  // ========\n\n\n  $(document).on('click', Selector.button, function (e) {\n    e.preventDefault();\n    Plugin.call($(this), 'toggle');\n  });\n  $(window).on('load', function () {\n    Plugin.call($(Selector.button));\n  });\n}(jQuery);\n/* TodoList()\n * =========\n * Converts a list into a todoList.\n *\n * @Usage: $('.my-list').todoList(options)\n *         or add [data-widget=\"todo-list\"] to the ul element\n *         Pass any option as data-option=\"value\"\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.todolist';\n  var Default = {\n    onCheck: function (item) {\n      return item;\n    },\n    onUnCheck: function (item) {\n      return item;\n    }\n  };\n  var Selector = {\n    data: '[data-widget=\"todo-list\"]'\n  };\n  var ClassName = {\n    done: 'done'\n  }; // TodoList Class Definition\n  // =========================\n\n  var TodoList = function (element, options) {\n    this.element = element;\n    this.options = options;\n\n    this._setUpListeners();\n  };\n\n  TodoList.prototype.toggle = function (item) {\n    item.parents(Selector.li).first().toggleClass(ClassName.done);\n\n    if (!item.prop('checked')) {\n      this.unCheck(item);\n      return;\n    }\n\n    this.check(item);\n  };\n\n  TodoList.prototype.check = function (item) {\n    this.options.onCheck.call(item);\n  };\n\n  TodoList.prototype.unCheck = function (item) {\n    this.options.onUnCheck.call(item);\n  }; // Private\n\n\n  TodoList.prototype._setUpListeners = function () {\n    var that = this;\n    $(this.element).on('change ifChanged', 'input:checkbox', function () {\n      that.toggle($(this));\n    });\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);\n        $this.data(DataKey, data = new TodoList($this, options));\n      }\n\n      if (typeof data == 'string') {\n        if (typeof data[option] == 'undefined') {\n          throw new Error('No method named ' + option);\n        }\n\n        data[option]();\n      }\n    });\n  }\n\n  var old = $.fn.todoList;\n  $.fn.todoList = Plugin;\n  $.fn.todoList.Constructor = TodoList; // No Conflict Mode\n  // ================\n\n  $.fn.todoList.noConflict = function () {\n    $.fn.todoList = old;\n    return this;\n  }; // TodoList Data API\n  // =================\n\n\n  $(window).on('load', function () {\n    $(Selector.data).each(function () {\n      Plugin.call($(this));\n    });\n  });\n}(jQuery);\n/* Tree()\n * ======\n * Converts a nested list into a multilevel\n * tree view menu.\n *\n * @Usage: $('.my-menu').tree(options)\n *         or add [data-widget=\"tree\"] to the ul element\n *         Pass any option as data-option=\"value\"\n */\n\n+function ($) {\n  'use strict';\n\n  var DataKey = 'lte.tree';\n  var Default = {\n    animationSpeed: 500,\n    accordion: true,\n    followLink: false,\n    trigger: '.treeview a'\n  };\n  var Selector = {\n    tree: '.tree',\n    treeview: '.treeview',\n    treeviewMenu: '.treeview-menu',\n    open: '.menu-open, .active',\n    li: 'li',\n    data: '[data-widget=\"tree\"]',\n    active: '.active'\n  };\n  var ClassName = {\n    open: 'menu-open',\n    tree: 'tree'\n  };\n  var Event = {\n    collapsed: 'collapsed.tree',\n    expanded: 'expanded.tree'\n  }; // Tree Class Definition\n  // =====================\n\n  var Tree = function (element, options) {\n    this.element = element;\n    this.options = options;\n    $(this.element).addClass(ClassName.tree);\n    $(Selector.treeview + Selector.active, this.element).addClass(ClassName.open);\n\n    this._setUpListeners();\n  };\n\n  Tree.prototype.toggle = function (link, event) {\n    var treeviewMenu = link.next(Selector.treeviewMenu);\n    var parentLi = link.parent();\n    var isOpen = parentLi.hasClass(ClassName.open);\n\n    if (!parentLi.is(Selector.treeview)) {\n      return;\n    }\n\n    if (!this.options.followLink || link.attr('href') === '#') {\n      event.preventDefault();\n    }\n\n    if (isOpen) {\n      this.collapse(treeviewMenu, parentLi);\n    } else {\n      this.expand(treeviewMenu, parentLi);\n    }\n  };\n\n  Tree.prototype.expand = function (tree, parent) {\n    var expandedEvent = $.Event(Event.expanded);\n\n    if (this.options.accordion) {\n      var openMenuLi = parent.siblings(Selector.open);\n      var openTree = openMenuLi.children(Selector.treeviewMenu);\n      this.collapse(openTree, openMenuLi);\n    }\n\n    parent.addClass(ClassName.open);\n    tree.slideDown(this.options.animationSpeed, function () {\n      $(this.element).trigger(expandedEvent);\n    }.bind(this));\n  };\n\n  Tree.prototype.collapse = function (tree, parentLi) {\n    var collapsedEvent = $.Event(Event.collapsed); //tree.find(Selector.open).removeClass(ClassName.open);\n\n    parentLi.removeClass(ClassName.open);\n    tree.slideUp(this.options.animationSpeed, function () {\n      //tree.find(Selector.open + ' > ' + Selector.treeview).slideUp();\n      $(this.element).trigger(collapsedEvent);\n    }.bind(this));\n  }; // Private\n\n\n  Tree.prototype._setUpListeners = function () {\n    var that = this;\n    $(this.element).on('click', this.options.trigger, function (event) {\n      that.toggle($(this), event);\n    });\n  }; // Plugin Definition\n  // =================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data(DataKey);\n\n      if (!data) {\n        var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);\n        $this.data(DataKey, new Tree($this, options));\n      }\n    });\n  }\n\n  var old = $.fn.tree;\n  $.fn.tree = Plugin;\n  $.fn.tree.Constructor = Tree; // No Conflict Mode\n  // ================\n\n  $.fn.tree.noConflict = function () {\n    $.fn.tree = old;\n    return this;\n  }; // Tree Data API\n  // =============\n\n\n  $(window).on('load', function () {\n    $(Selector.data).each(function () {\n      Plugin.call($(this));\n    });\n  });\n}(jQuery);\n\n//# sourceURL=webpack:///./src/scripts/adminlte.js?");

/***/ }),

/***/ "./src/scripts/bootstrap.js":
/*!**********************************!*\
  !*** ./src/scripts/bootstrap.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * Bootstrap v3.3.7 (http://getbootstrap.com)\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under the MIT license\n */\nif (typeof jQuery === 'undefined') {\n  throw new Error('Bootstrap\\'s JavaScript requires jQuery');\n}\n\n+function ($) {\n  'use strict';\n\n  var version = $.fn.jquery.split(' ')[0].split('.');\n\n  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {\n    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');\n  }\n}(jQuery);\n/* ========================================================================\n * Bootstrap: transition.js v3.3.7\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap');\n    var transEndEventNames = {\n      WebkitTransition: 'webkitTransitionEnd',\n      MozTransition: 'transitionend',\n      OTransition: 'oTransitionEnd otransitionend',\n      transition: 'transitionend'\n    };\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return {\n          end: transEndEventNames[name]\n        };\n      }\n    }\n\n    return false; // explicit for ie8 (  ._.)\n  } // http://blog.alexmaccaw.com/css-transitions\n\n\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false;\n    var $el = this;\n    $(this).one('bsTransitionEnd', function () {\n      called = true;\n    });\n\n    var callback = function () {\n      if (!called) $($el).trigger($.support.transition.end);\n    };\n\n    setTimeout(callback, duration);\n    return this;\n  };\n\n  $(function () {\n    $.support.transition = transitionEnd();\n    if (!$.support.transition) return;\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function (e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);\n      }\n    };\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: alert.js v3.3.7\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]';\n\n  var Alert = function (el) {\n    $(el).on('click', dismiss, this.close);\n  };\n\n  Alert.VERSION = '3.3.7';\n  Alert.TRANSITION_DURATION = 150;\n\n  Alert.prototype.close = function (e) {\n    var $this = $(this);\n    var selector = $this.attr('data-target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    var $parent = $(selector === '#' ? [] : selector);\n    if (e) e.preventDefault();\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert');\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'));\n    if (e.isDefaultPrevented()) return;\n    $parent.removeClass('in');\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove();\n    }\n\n    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();\n  }; // ALERT PLUGIN DEFINITION\n  // =======================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.alert');\n      if (!data) $this.data('bs.alert', data = new Alert(this));\n      if (typeof option == 'string') data[option].call($this);\n    });\n  }\n\n  var old = $.fn.alert;\n  $.fn.alert = Plugin;\n  $.fn.alert.Constructor = Alert; // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old;\n    return this;\n  }; // ALERT DATA-API\n  // ==============\n\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);\n}(jQuery);\n/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Button.DEFAULTS, options);\n    this.isLoading = false;\n  };\n\n  Button.VERSION = '3.3.7';\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  };\n\n  Button.prototype.setState = function (state) {\n    var d = 'disabled';\n    var $el = this.$element;\n    var val = $el.is('input') ? 'val' : 'html';\n    var data = $el.data();\n    state += 'Text';\n    if (data.resetText == null) $el.data('resetText', $el[val]()); // push to event loop to allow forms to submit\n\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state]);\n\n      if (state == 'loadingText') {\n        this.isLoading = true;\n        $el.addClass(d).attr(d, d).prop(d, true);\n      } else if (this.isLoading) {\n        this.isLoading = false;\n        $el.removeClass(d).removeAttr(d).prop(d, false);\n      }\n    }, this), 0);\n  };\n\n  Button.prototype.toggle = function () {\n    var changed = true;\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]');\n\n    if ($parent.length) {\n      var $input = this.$element.find('input');\n\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false;\n        $parent.find('.active').removeClass('active');\n        this.$element.addClass('active');\n      } else if ($input.prop('type') == 'checkbox') {\n        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;\n        this.$element.toggleClass('active');\n      }\n\n      $input.prop('checked', this.$element.hasClass('active'));\n      if (changed) $input.trigger('change');\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));\n      this.$element.toggleClass('active');\n    }\n  }; // BUTTON PLUGIN DEFINITION\n  // ========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.button');\n      var options = typeof option == 'object' && option;\n      if (!data) $this.data('bs.button', data = new Button(this, options));\n      if (option == 'toggle') data.toggle();else if (option) data.setState(option);\n    });\n  }\n\n  var old = $.fn.button;\n  $.fn.button = Plugin;\n  $.fn.button.Constructor = Button; // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old;\n    return this;\n  }; // BUTTON DATA-API\n  // ===============\n\n\n  $(document).on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n    var $btn = $(e.target).closest('.btn');\n    Plugin.call($btn, 'toggle');\n\n    if (!$(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]')) {\n      // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n      e.preventDefault(); // The target component still receive the focus\n\n      if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');\n    }\n  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: carousel.js v3.3.7\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function (element, options) {\n    this.$element = $(element);\n    this.$indicators = this.$element.find('.carousel-indicators');\n    this.options = options;\n    this.paused = null;\n    this.sliding = null;\n    this.interval = null;\n    this.$active = null;\n    this.$items = null;\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));\n  };\n\n  Carousel.VERSION = '3.3.7';\n  Carousel.TRANSITION_DURATION = 600;\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  };\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return;\n\n    switch (e.which) {\n      case 37:\n        this.prev();\n        break;\n\n      case 39:\n        this.next();\n        break;\n\n      default:\n        return;\n    }\n\n    e.preventDefault();\n  };\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false);\n    this.interval && clearInterval(this.interval);\n    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));\n    return this;\n  };\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item');\n    return this.$items.index(item || this.$active);\n  };\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active);\n    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;\n    if (willWrap && !this.options.wrap) return active;\n    var delta = direction == 'prev' ? -1 : 1;\n    var itemIndex = (activeIndex + delta) % this.$items.length;\n    return this.$items.eq(itemIndex);\n  };\n\n  Carousel.prototype.to = function (pos) {\n    var that = this;\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));\n    if (pos > this.$items.length - 1 || pos < 0) return;\n    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {\n      that.to(pos);\n    }); // yes, \"slid\"\n\n    if (activeIndex == pos) return this.pause().cycle();\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));\n  };\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true);\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end);\n      this.cycle(true);\n    }\n\n    this.interval = clearInterval(this.interval);\n    return this;\n  };\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return;\n    return this.slide('next');\n  };\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return;\n    return this.slide('prev');\n  };\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active = this.$element.find('.item.active');\n    var $next = next || this.getItemForDirection(type, $active);\n    var isCycling = this.interval;\n    var direction = type == 'next' ? 'left' : 'right';\n    var that = this;\n    if ($next.hasClass('active')) return this.sliding = false;\n    var relatedTarget = $next[0];\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    });\n    this.$element.trigger(slideEvent);\n    if (slideEvent.isDefaultPrevented()) return;\n    this.sliding = true;\n    isCycling && this.pause();\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active');\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);\n      $nextIndicator && $nextIndicator.addClass('active');\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    }); // yes, \"slid\"\n\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type);\n      $next[0].offsetWidth; // force reflow\n\n      $active.addClass(direction);\n      $next.addClass(direction);\n      $active.one('bsTransitionEnd', function () {\n        $next.removeClass([type, direction].join(' ')).addClass('active');\n        $active.removeClass(['active', direction].join(' '));\n        that.sliding = false;\n        setTimeout(function () {\n          that.$element.trigger(slidEvent);\n        }, 0);\n      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);\n    } else {\n      $active.removeClass('active');\n      $next.addClass('active');\n      this.sliding = false;\n      this.$element.trigger(slidEvent);\n    }\n\n    isCycling && this.cycle();\n    return this;\n  }; // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.carousel');\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option);\n      var action = typeof option == 'string' ? option : options.slide;\n      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));\n      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();\n    });\n  }\n\n  var old = $.fn.carousel;\n  $.fn.carousel = Plugin;\n  $.fn.carousel.Constructor = Carousel; // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old;\n    return this;\n  }; // CAROUSEL DATA-API\n  // =================\n\n\n  var clickHandler = function (e) {\n    var href;\n    var $this = $(this);\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')); // strip for ie7\n\n    if (!$target.hasClass('carousel')) return;\n    var options = $.extend({}, $target.data(), $this.data());\n    var slideIndex = $this.attr('data-slide-to');\n    if (slideIndex) options.interval = false;\n    Plugin.call($target, options);\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex);\n    }\n\n    e.preventDefault();\n  };\n\n  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this);\n      Plugin.call($carousel, $carousel.data());\n    });\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: collapse.js v3.3.7\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n/* jshint latedef: false */\n\n+function ($) {\n  'use strict'; // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Collapse.DEFAULTS, options);\n    this.$trigger = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' + '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]');\n    this.transitioning = null;\n\n    if (this.options.parent) {\n      this.$parent = this.getParent();\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger);\n    }\n\n    if (this.options.toggle) this.toggle();\n  };\n\n  Collapse.VERSION = '3.3.7';\n  Collapse.TRANSITION_DURATION = 350;\n  Collapse.DEFAULTS = {\n    toggle: true\n  };\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width');\n    return hasWidth ? 'width' : 'height';\n  };\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return;\n    var activesData;\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse');\n      if (activesData && activesData.transitioning) return;\n    }\n\n    var startEvent = $.Event('show.bs.collapse');\n    this.$element.trigger(startEvent);\n    if (startEvent.isDefaultPrevented()) return;\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide');\n      activesData || actives.data('bs.collapse', null);\n    }\n\n    var dimension = this.dimension();\n    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);\n    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);\n    this.transitioning = 1;\n\n    var complete = function () {\n      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');\n      this.transitioning = 0;\n      this.$element.trigger('shown.bs.collapse');\n    };\n\n    if (!$.support.transition) return complete.call(this);\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'));\n    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);\n  };\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return;\n    var startEvent = $.Event('hide.bs.collapse');\n    this.$element.trigger(startEvent);\n    if (startEvent.isDefaultPrevented()) return;\n    var dimension = this.dimension();\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;\n    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);\n    this.$trigger.addClass('collapsed').attr('aria-expanded', false);\n    this.transitioning = 1;\n\n    var complete = function () {\n      this.transitioning = 0;\n      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');\n    };\n\n    if (!$.support.transition) return complete.call(this);\n    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);\n  };\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']();\n  };\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent).find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]').each($.proxy(function (i, element) {\n      var $element = $(element);\n      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);\n    }, this)).end();\n  };\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in');\n    $element.attr('aria-expanded', isOpen);\n    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);\n  };\n\n  function getTargetFromTrigger($trigger) {\n    var href;\n    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, ''); // strip for ie7\n\n    return $(target);\n  } // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.collapse');\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;\n      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.collapse;\n  $.fn.collapse = Plugin;\n  $.fn.collapse.Constructor = Collapse; // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old;\n    return this;\n  }; // COLLAPSE DATA-API\n  // =================\n\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this = $(this);\n    if (!$this.attr('data-target')) e.preventDefault();\n    var $target = getTargetFromTrigger($this);\n    var data = $target.data('bs.collapse');\n    var option = data ? 'toggle' : $this.data();\n    Plugin.call($target, option);\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: dropdown.js v3.3.7\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop';\n  var toggle = '[data-toggle=\"dropdown\"]';\n\n  var Dropdown = function (element) {\n    $(element).on('click.bs.dropdown', this.toggle);\n  };\n\n  Dropdown.VERSION = '3.3.7';\n\n  function getParent($this) {\n    var selector = $this.attr('data-target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    var $parent = selector && $(selector);\n    return $parent && $parent.length ? $parent : $this.parent();\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return;\n    $(backdrop).remove();\n    $(toggle).each(function () {\n      var $this = $(this);\n      var $parent = getParent($this);\n      var relatedTarget = {\n        relatedTarget: this\n      };\n      if (!$parent.hasClass('open')) return;\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));\n      if (e.isDefaultPrevented()) return;\n      $this.attr('aria-expanded', 'false');\n      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));\n    });\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this);\n    if ($this.is('.disabled, :disabled')) return;\n    var $parent = getParent($this);\n    var isActive = $parent.hasClass('open');\n    clearMenus();\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);\n      }\n\n      var relatedTarget = {\n        relatedTarget: this\n      };\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));\n      if (e.isDefaultPrevented()) return;\n      $this.trigger('focus').attr('aria-expanded', 'true');\n      $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));\n    }\n\n    return false;\n  };\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;\n    var $this = $(this);\n    e.preventDefault();\n    e.stopPropagation();\n    if ($this.is('.disabled, :disabled')) return;\n    var $parent = getParent($this);\n    var isActive = $parent.hasClass('open');\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus');\n      return $this.trigger('click');\n    }\n\n    var desc = ' li:not(.disabled):visible a';\n    var $items = $parent.find('.dropdown-menu' + desc);\n    if (!$items.length) return;\n    var index = $items.index(e.target);\n    if (e.which == 38 && index > 0) index--; // up\n\n    if (e.which == 40 && index < $items.length - 1) index++; // down\n\n    if (!~index) index = 0;\n    $items.eq(index).trigger('focus');\n  }; // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.dropdown');\n      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));\n      if (typeof option == 'string') data[option].call($this);\n    });\n  }\n\n  var old = $.fn.dropdown;\n  $.fn.dropdown = Plugin;\n  $.fn.dropdown.Constructor = Dropdown; // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old;\n    return this;\n  }; // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n\n  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {\n    e.stopPropagation();\n  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);\n}(jQuery);\n/* ========================================================================\n * Bootstrap: modal.js v3.3.7\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function (element, options) {\n    this.options = options;\n    this.$body = $(document.body);\n    this.$element = $(element);\n    this.$dialog = this.$element.find('.modal-dialog');\n    this.$backdrop = null;\n    this.isShown = null;\n    this.originalBodyPad = null;\n    this.scrollbarWidth = 0;\n    this.ignoreBackdropClick = false;\n\n    if (this.options.remote) {\n      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {\n        this.$element.trigger('loaded.bs.modal');\n      }, this));\n    }\n  };\n\n  Modal.VERSION = '3.3.7';\n  Modal.TRANSITION_DURATION = 300;\n  Modal.BACKDROP_TRANSITION_DURATION = 150;\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  };\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget);\n  };\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this;\n    var e = $.Event('show.bs.modal', {\n      relatedTarget: _relatedTarget\n    });\n    this.$element.trigger(e);\n    if (this.isShown || e.isDefaultPrevented()) return;\n    this.isShown = true;\n    this.checkScrollbar();\n    this.setScrollbar();\n    this.$body.addClass('modal-open');\n    this.escape();\n    this.resize();\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this));\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;\n      });\n    });\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade');\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body); // don't move modals dom position\n      }\n\n      that.$element.show().scrollTop(0);\n      that.adjustDialog();\n\n      if (transition) {\n        that.$element[0].offsetWidth; // force reflow\n      }\n\n      that.$element.addClass('in');\n      that.enforceFocus();\n      var e = $.Event('shown.bs.modal', {\n        relatedTarget: _relatedTarget\n      });\n      transition ? that.$dialog // wait for modal to slide in\n      .one('bsTransitionEnd', function () {\n        that.$element.trigger('focus').trigger(e);\n      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);\n    });\n  };\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault();\n    e = $.Event('hide.bs.modal');\n    this.$element.trigger(e);\n    if (!this.isShown || e.isDefaultPrevented()) return;\n    this.isShown = false;\n    this.escape();\n    this.resize();\n    $(document).off('focusin.bs.modal');\n    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');\n    this.$dialog.off('mousedown.dismiss.bs.modal');\n    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();\n  };\n\n  Modal.prototype.enforceFocus = function () {\n    $(document).off('focusin.bs.modal') // guard against infinite focus loop\n    .on('focusin.bs.modal', $.proxy(function (e) {\n      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n        this.$element.trigger('focus');\n      }\n    }, this));\n  };\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide();\n      }, this));\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal');\n    }\n  };\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));\n    } else {\n      $(window).off('resize.bs.modal');\n    }\n  };\n\n  Modal.prototype.hideModal = function () {\n    var that = this;\n    this.$element.hide();\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open');\n      that.resetAdjustments();\n      that.resetScrollbar();\n      that.$element.trigger('hidden.bs.modal');\n    });\n  };\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove();\n    this.$backdrop = null;\n  };\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this;\n    var animate = this.$element.hasClass('fade') ? 'fade' : '';\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate;\n      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false;\n          return;\n        }\n\n        if (e.target !== e.currentTarget) return;\n        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();\n      }, this));\n      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow\n\n      this.$backdrop.addClass('in');\n      if (!callback) return;\n      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in');\n\n      var callbackRemove = function () {\n        that.removeBackdrop();\n        callback && callback();\n      };\n\n      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();\n    } else if (callback) {\n      callback();\n    }\n  }; // these following methods are used to handle overflowing modals\n\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog();\n  };\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;\n    this.$element.css({\n      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    });\n  };\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    });\n  };\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth;\n\n    if (!fullWindowWidth) {\n      // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect();\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n    }\n\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n    this.scrollbarWidth = this.measureScrollbar();\n  };\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);\n    this.originalBodyPad = document.body.style.paddingRight || '';\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);\n  };\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad);\n  };\n\n  Modal.prototype.measureScrollbar = function () {\n    // thx walsh\n    var scrollDiv = document.createElement('div');\n    scrollDiv.className = 'modal-scrollbar-measure';\n    this.$body.append(scrollDiv);\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    this.$body[0].removeChild(scrollDiv);\n    return scrollbarWidth;\n  }; // MODAL PLUGIN DEFINITION\n  // =======================\n\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.modal');\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);\n      if (!data) $this.data('bs.modal', data = new Modal(this, options));\n      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);\n    });\n  }\n\n  var old = $.fn.modal;\n  $.fn.modal = Plugin;\n  $.fn.modal.Constructor = Modal; // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old;\n    return this;\n  }; // MODAL DATA-API\n  // ==============\n\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this = $(this);\n    var href = $this.attr('href');\n    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\\s]+$)/, '')); // strip for ie7\n\n    var option = $target.data('bs.modal') ? 'toggle' : $.extend({\n      remote: !/#/.test(href) && href\n    }, $target.data(), $this.data());\n    if ($this.is('a')) e.preventDefault();\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown\n\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus');\n      });\n    });\n    Plugin.call($target, option, this);\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: tooltip.js v3.3.7\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type = null;\n    this.options = null;\n    this.enabled = null;\n    this.timeout = null;\n    this.hoverState = null;\n    this.$element = null;\n    this.inState = null;\n    this.init('tooltip', element, options);\n  };\n\n  Tooltip.VERSION = '3.3.7';\n  Tooltip.TRANSITION_DURATION = 150;\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  };\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled = true;\n    this.type = type;\n    this.$element = $(element);\n    this.options = this.getOptions(options);\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);\n    this.inState = {\n      click: false,\n      hover: false,\n      focus: false\n    };\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');\n    }\n\n    var triggers = this.options.trigger.split(' ');\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i];\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));\n      } else if (trigger != 'manual') {\n        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';\n        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));\n      }\n    }\n\n    this.options.selector ? this._options = $.extend({}, this.options, {\n      trigger: 'manual',\n      selector: ''\n    }) : this.fixTitle();\n  };\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS;\n  };\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options);\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      };\n    }\n\n    return options;\n  };\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options = {};\n    var defaults = this.getDefaults();\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value;\n    });\n    return options;\n  };\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\n      $(obj.currentTarget).data('bs.' + this.type, self);\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in';\n      return;\n    }\n\n    clearTimeout(self.timeout);\n    self.hoverState = 'in';\n    if (!self.options.delay || !self.options.delay.show) return self.show();\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show();\n    }, self.options.delay.show);\n  };\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true;\n    }\n\n    return false;\n  };\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\n      $(obj.currentTarget).data('bs.' + this.type, self);\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;\n    }\n\n    if (self.isInStateTrue()) return;\n    clearTimeout(self.timeout);\n    self.hoverState = 'out';\n    if (!self.options.delay || !self.options.delay.hide) return self.hide();\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide();\n    }, self.options.delay.hide);\n  };\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type);\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e);\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);\n      if (e.isDefaultPrevented() || !inDom) return;\n      var that = this;\n      var $tip = this.tip();\n      var tipId = this.getUID(this.type);\n      this.setContent();\n      $tip.attr('id', tipId);\n      this.$element.attr('aria-describedby', tipId);\n      if (this.options.animation) $tip.addClass('fade');\n      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;\n      var autoToken = /\\s?auto?\\s?/i;\n      var autoPlace = autoToken.test(placement);\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';\n      $tip.detach().css({\n        top: 0,\n        left: 0,\n        display: 'block'\n      }).addClass(placement).data('bs.' + this.type, this);\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);\n      this.$element.trigger('inserted.bs.' + this.type);\n      var pos = this.getPosition();\n      var actualWidth = $tip[0].offsetWidth;\n      var actualHeight = $tip[0].offsetHeight;\n\n      if (autoPlace) {\n        var orgPlacement = placement;\n        var viewportDim = this.getPosition(this.$viewport);\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;\n        $tip.removeClass(orgPlacement).addClass(placement);\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\n      this.applyPlacement(calculatedOffset, placement);\n\n      var complete = function () {\n        var prevHoverState = that.hoverState;\n        that.$element.trigger('shown.bs.' + that.type);\n        that.hoverState = null;\n        if (prevHoverState == 'out') that.leave(that);\n      };\n\n      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();\n    }\n  };\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip = this.tip();\n    var width = $tip[0].offsetWidth;\n    var height = $tip[0].offsetHeight; // manually read margins because getBoundingClientRect includes difference\n\n    var marginTop = parseInt($tip.css('margin-top'), 10);\n    var marginLeft = parseInt($tip.css('margin-left'), 10); // we must check for NaN for ie 8/9\n\n    if (isNaN(marginTop)) marginTop = 0;\n    if (isNaN(marginLeft)) marginLeft = 0;\n    offset.top += marginTop;\n    offset.left += marginLeft; // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        });\n      }\n    }, offset), 0);\n    $tip.addClass('in'); // check to see if placing tip in new offset caused the tip to resize itself\n\n    var actualWidth = $tip[0].offsetWidth;\n    var actualHeight = $tip[0].offsetHeight;\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight;\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n    if (delta.left) offset.left += delta.left;else offset.top += delta.top;\n    var isVertical = /top|bottom/.test(placement);\n    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n    $tip.offset(offset);\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);\n  };\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');\n  };\n\n  Tooltip.prototype.setContent = function () {\n    var $tip = this.tip();\n    var title = this.getTitle();\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);\n    $tip.removeClass('fade in top bottom left right');\n  };\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this;\n    var $tip = $(this.$tip);\n    var e = $.Event('hide.bs.' + this.type);\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach();\n\n      if (that.$element) {\n        // TODO: Check whether guarding this code with this `if` is really necessary.\n        that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);\n      }\n\n      callback && callback();\n    }\n\n    this.$element.trigger(e);\n    if (e.isDefaultPrevented()) return;\n    $tip.removeClass('in');\n    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();\n    this.hoverState = null;\n    return this;\n  };\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element;\n\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');\n    }\n  };\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle();\n  };\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element = $element || this.$element;\n    var el = $element[0];\n    var isBody = el.tagName == 'BODY';\n    var elRect = el.getBoundingClientRect();\n\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, {\n        width: elRect.right - elRect.left,\n        height: elRect.bottom - elRect.top\n      });\n    }\n\n    var isSvg = window.SVGElement && el instanceof window.SVGElement; // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n    // See https://github.com/twbs/bootstrap/issues/20280\n\n    var elOffset = isBody ? {\n      top: 0,\n      left: 0\n    } : isSvg ? null : $element.offset();\n    var scroll = {\n      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()\n    };\n    var outerDims = isBody ? {\n      width: $(window).width(),\n      height: $(window).height()\n    } : null;\n    return $.extend({}, elRect, scroll, outerDims, elOffset);\n  };\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? {\n      top: pos.top + pos.height,\n      left: pos.left + pos.width / 2 - actualWidth / 2\n    } : placement == 'top' ? {\n      top: pos.top - actualHeight,\n      left: pos.left + pos.width / 2 - actualWidth / 2\n    } : placement == 'left' ? {\n      top: pos.top + pos.height / 2 - actualHeight / 2,\n      left: pos.left - actualWidth\n    } :\n    /* placement == 'right' */\n    {\n      top: pos.top + pos.height / 2 - actualHeight / 2,\n      left: pos.left + pos.width\n    };\n  };\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = {\n      top: 0,\n      left: 0\n    };\n    if (!this.$viewport) return delta;\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;\n    var viewportDimensions = this.getPosition(this.$viewport);\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n\n      if (topEdgeOffset < viewportDimensions.top) {\n        // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset;\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {\n        // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n      }\n    } else {\n      var leftEdgeOffset = pos.left - viewportPadding;\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;\n\n      if (leftEdgeOffset < viewportDimensions.left) {\n        // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset;\n      } else if (rightEdgeOffset > viewportDimensions.right) {\n        // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n      }\n    }\n\n    return delta;\n  };\n\n  Tooltip.prototype.getTitle = function () {\n    var title;\n    var $e = this.$element;\n    var o = this.options;\n    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);\n    return title;\n  };\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000); while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template);\n\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');\n      }\n    }\n\n    return this.$tip;\n  };\n\n  Tooltip.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');\n  };\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true;\n  };\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false;\n  };\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled;\n  };\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this;\n\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type);\n\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions());\n        $(e.currentTarget).data('bs.' + this.type, self);\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click;\n      if (self.isInStateTrue()) self.enter(self);else self.leave(self);\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);\n    }\n  };\n\n  Tooltip.prototype.destroy = function () {\n    var that = this;\n    clearTimeout(this.timeout);\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type);\n\n      if (that.$tip) {\n        that.$tip.detach();\n      }\n\n      that.$tip = null;\n      that.$arrow = null;\n      that.$viewport = null;\n      that.$element = null;\n    });\n  }; // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.tooltip');\n      var options = typeof option == 'object' && option;\n      if (!data && /destroy|hide/.test(option)) return;\n      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.tooltip;\n  $.fn.tooltip = Plugin;\n  $.fn.tooltip.Constructor = Tooltip; // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old;\n    return this;\n  };\n}(jQuery);\n/* ========================================================================\n * Bootstrap: popover.js v3.3.7\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function (element, options) {\n    this.init('popover', element, options);\n  };\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');\n  Popover.VERSION = '3.3.7';\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  }); // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);\n  Popover.prototype.constructor = Popover;\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS;\n  };\n\n  Popover.prototype.setContent = function () {\n    var $tip = this.tip();\n    var title = this.getTitle();\n    var content = this.getContent();\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);\n    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events\n    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);\n    $tip.removeClass('fade top bottom left right in'); // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();\n  };\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent();\n  };\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element;\n    var o = this.options;\n    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);\n  };\n\n  Popover.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find('.arrow');\n  }; // POPOVER PLUGIN DEFINITION\n  // =========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.popover');\n      var options = typeof option == 'object' && option;\n      if (!data && /destroy|hide/.test(option)) return;\n      if (!data) $this.data('bs.popover', data = new Popover(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.popover;\n  $.fn.popover = Plugin;\n  $.fn.popover.Constructor = Popover; // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old;\n    return this;\n  };\n}(jQuery);\n/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.7\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body = $(document.body);\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);\n    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);\n    this.selector = (this.options.target || '') + ' .nav li > a';\n    this.offsets = [];\n    this.targets = [];\n    this.activeTarget = null;\n    this.scrollHeight = 0;\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));\n    this.refresh();\n    this.process();\n  }\n\n  ScrollSpy.VERSION = '3.3.7';\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  };\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);\n  };\n\n  ScrollSpy.prototype.refresh = function () {\n    var that = this;\n    var offsetMethod = 'offset';\n    var offsetBase = 0;\n    this.offsets = [];\n    this.targets = [];\n    this.scrollHeight = this.getScrollHeight();\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position';\n      offsetBase = this.$scrollElement.scrollTop();\n    }\n\n    this.$body.find(this.selector).map(function () {\n      var $el = $(this);\n      var href = $el.data('target') || $el.attr('href');\n      var $href = /^#./.test(href) && $(href);\n      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;\n    }).sort(function (a, b) {\n      return a[0] - b[0];\n    }).each(function () {\n      that.offsets.push(this[0]);\n      that.targets.push(this[1]);\n    });\n  };\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;\n    var scrollHeight = this.getScrollHeight();\n    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();\n    var offsets = this.offsets;\n    var targets = this.targets;\n    var activeTarget = this.activeTarget;\n    var i;\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh();\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null;\n      return this.clear();\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);\n    }\n  };\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target;\n    this.clear();\n    var selector = this.selector + '[data-target=\"' + target + '\"],' + this.selector + '[href=\"' + target + '\"]';\n    var active = $(selector).parents('li').addClass('active');\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active.closest('li.dropdown').addClass('active');\n    }\n\n    active.trigger('activate.bs.scrollspy');\n  };\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');\n  }; // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.scrollspy');\n      var options = typeof option == 'object' && option;\n      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.scrollspy;\n  $.fn.scrollspy = Plugin;\n  $.fn.scrollspy.Constructor = ScrollSpy; // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old;\n    return this;\n  }; // SCROLLSPY DATA-API\n  // ==================\n\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this);\n      Plugin.call($spy, $spy.data());\n    });\n  });\n}(jQuery);\n/* ========================================================================\n * Bootstrap: tab.js v3.3.7\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function (element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element); // jscs:enable requireDollarBeforejQueryAssignment\n  };\n\n  Tab.VERSION = '3.3.7';\n  Tab.TRANSITION_DURATION = 150;\n\n  Tab.prototype.show = function () {\n    var $this = this.element;\n    var $ul = $this.closest('ul:not(.dropdown-menu)');\n    var selector = $this.data('target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return;\n    var $previous = $ul.find('.active:last a');\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    });\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    });\n    $previous.trigger(hideEvent);\n    $this.trigger(showEvent);\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;\n    var $target = $(selector);\n    this.activate($this.closest('li'), $ul);\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      });\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      });\n    });\n  };\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active = container.find('> .active');\n    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);\n\n    function next() {\n      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle=\"tab\"]').attr('aria-expanded', false);\n      element.addClass('active').find('[data-toggle=\"tab\"]').attr('aria-expanded', true);\n\n      if (transition) {\n        element[0].offsetWidth; // reflow for transition\n\n        element.addClass('in');\n      } else {\n        element.removeClass('fade');\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element.closest('li.dropdown').addClass('active').end().find('[data-toggle=\"tab\"]').attr('aria-expanded', true);\n      }\n\n      callback && callback();\n    }\n\n    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();\n    $active.removeClass('in');\n  }; // TAB PLUGIN DEFINITION\n  // =====================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.tab');\n      if (!data) $this.data('bs.tab', data = new Tab(this));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.tab;\n  $.fn.tab = Plugin;\n  $.fn.tab.Constructor = Tab; // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old;\n    return this;\n  }; // TAB DATA-API\n  // ============\n\n\n  var clickHandler = function (e) {\n    e.preventDefault();\n    Plugin.call($(this), 'show');\n  };\n\n  $(document).on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler);\n}(jQuery);\n/* ========================================================================\n * Bootstrap: affix.js v3.3.7\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict'; // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function (element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options);\n    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));\n    this.$element = $(element);\n    this.affixed = null;\n    this.unpin = null;\n    this.pinnedOffset = null;\n    this.checkPosition();\n  };\n\n  Affix.VERSION = '3.3.7';\n  Affix.RESET = 'affix affix-top affix-bottom';\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  };\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop = this.$target.scrollTop();\n    var position = this.$element.offset();\n    var targetHeight = this.$target.height();\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';\n      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';\n    }\n\n    var initializing = this.affixed == null;\n    var colliderTop = initializing ? scrollTop : position.top;\n    var colliderHeight = initializing ? targetHeight : height;\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top';\n    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';\n    return false;\n  };\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset;\n    this.$element.removeClass(Affix.RESET).addClass('affix');\n    var scrollTop = this.$target.scrollTop();\n    var position = this.$element.offset();\n    return this.pinnedOffset = position.top - scrollTop;\n  };\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1);\n  };\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return;\n    var height = this.$element.height();\n    var offset = this.options.offset;\n    var offsetTop = offset.top;\n    var offsetBottom = offset.bottom;\n    var scrollHeight = Math.max($(document).height(), $(document.body).height());\n    if (typeof offset != 'object') offsetBottom = offsetTop = offset;\n    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '');\n      var affixType = 'affix' + (affix ? '-' + affix : '');\n      var e = $.Event(affixType + '.bs.affix');\n      this.$element.trigger(e);\n      if (e.isDefaultPrevented()) return;\n      this.affixed = affix;\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;\n      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      });\n    }\n  }; // AFFIX PLUGIN DEFINITION\n  // =======================\n\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.affix');\n      var options = typeof option == 'object' && option;\n      if (!data) $this.data('bs.affix', data = new Affix(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.affix;\n  $.fn.affix = Plugin;\n  $.fn.affix.Constructor = Affix; // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old;\n    return this;\n  }; // AFFIX DATA-API\n  // ==============\n\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this);\n      var data = $spy.data();\n      data.offset = data.offset || {};\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;\n      if (data.offsetTop != null) data.offset.top = data.offsetTop;\n      Plugin.call($spy, data);\n    });\n  });\n}(jQuery);\n\n//# sourceURL=webpack:///./src/scripts/bootstrap.js?");

/***/ }),

/***/ "./src/scripts/custom.js":
/*!*******************************!*\
  !*** ./src/scripts/custom.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Custom JS file - All Custom JS code goes here\n////////////////////////////////////////////////\n$(function () {\n  $('input').iCheck({\n    checkboxClass: 'icheckbox_square-blue',\n    radioClass: 'iradio_square-blue',\n    increaseArea: '20%'\n    /* optional */\n\n  });\n}); // login area // show hide // login and forgot password\n\n$('.signin-trigger').click(function (event) {\n  event.preventDefault();\n  $('.signin-box').show();\n  $('.forgot-password').hide();\n});\n$('.forgot-password-trigger').click(function (event) {\n  event.preventDefault();\n  $('.forgot-password').show();\n  $('.signin-box').hide();\n}); ///////////////////////////////////////////////////////\n\n$(document).ready(function () {\n  $('.sidebar-menu').tree();\n});\n$(function () {\n  $('#daterange').daterangepicker({\n    timePicker: true,\n    timePickerIncrement: 30,\n    locale: {\n      format: 'MM/DD/YYYY h:mm A'\n    },\n    ranges: {\n      'Today': [moment(), moment()],\n      'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n      'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n      'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n      'This Month': [moment().startOf('month'), moment().endOf('month')],\n      'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n    }\n  });\n  $(window).scroll(function () {\n    if ($('#daterange').length) {\n      $('#daterange').daterangepicker(\"close\");\n    }\n  });\n});\n\n//# sourceURL=webpack:///./src/scripts/custom.js?");

/***/ }),

/***/ "./src/scripts/icheck.js":
/*!*******************************!*\
  !*** ./src/scripts/icheck.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * iCheck v1.0.1, http://git.io/arlzeA\n * =================================\n * Powerful jQuery and Zepto plugin for checkboxes and radio buttons customization\n *\n * (c) 2013 Damir Sultanov, http://fronteed.com\n * MIT Licensed\n */\n(function ($) {\n  // Cached vars\n  var _iCheck = 'iCheck',\n      _iCheckHelper = _iCheck + '-helper',\n      _checkbox = 'checkbox',\n      _radio = 'radio',\n      _checked = 'checked',\n      _unchecked = 'un' + _checked,\n      _disabled = 'disabled',\n      _determinate = 'determinate',\n      _indeterminate = 'in' + _determinate,\n      _update = 'update',\n      _type = 'type',\n      _click = 'click',\n      _touch = 'touchbegin.i touchend.i',\n      _add = 'addClass',\n      _remove = 'removeClass',\n      _callback = 'trigger',\n      _label = 'label',\n      _cursor = 'cursor',\n      _mobile = /ipad|iphone|ipod|android|blackberry|windows phone|opera mini|silk/i.test(navigator.userAgent); // Plugin init\n\n\n  $.fn[_iCheck] = function (options, fire) {\n    // Walker\n    var handle = 'input[type=\"' + _checkbox + '\"], input[type=\"' + _radio + '\"]',\n        stack = $(),\n        walker = function (object) {\n      object.each(function () {\n        var self = $(this);\n\n        if (self.is(handle)) {\n          stack = stack.add(self);\n        } else {\n          stack = stack.add(self.find(handle));\n        }\n      });\n    }; // Check if we should operate with some method\n\n\n    if (/^(check|uncheck|toggle|indeterminate|determinate|disable|enable|update|destroy)$/i.test(options)) {\n      // Normalize method's name\n      options = options.toLowerCase(); // Find checkboxes and radio buttons\n\n      walker(this);\n      return stack.each(function () {\n        var self = $(this);\n\n        if (options == 'destroy') {\n          tidy(self, 'ifDestroyed');\n        } else {\n          operate(self, true, options);\n        } // Fire method's callback\n\n\n        if ($.isFunction(fire)) {\n          fire();\n        }\n      }); // Customization\n    } else if (typeof options == 'object' || !options) {\n      // Check if any options were passed\n      var settings = $.extend({\n        checkedClass: _checked,\n        disabledClass: _disabled,\n        indeterminateClass: _indeterminate,\n        labelHover: true,\n        aria: false\n      }, options),\n          selector = settings.handle,\n          hoverClass = settings.hoverClass || 'hover',\n          focusClass = settings.focusClass || 'focus',\n          activeClass = settings.activeClass || 'active',\n          labelHover = !!settings.labelHover,\n          labelHoverClass = settings.labelHoverClass || 'hover',\n          // Setup clickable area\n      area = ('' + settings.increaseArea).replace('%', '') | 0; // Selector limit\n\n      if (selector == _checkbox || selector == _radio) {\n        handle = 'input[type=\"' + selector + '\"]';\n      } // Clickable area limit\n\n\n      if (area < -50) {\n        area = -50;\n      } // Walk around the selector\n\n\n      walker(this);\n      return stack.each(function () {\n        var self = $(this); // If already customized\n\n        tidy(self);\n        var node = this,\n            id = node.id,\n            // Layer styles\n        offset = -area + '%',\n            size = 100 + area * 2 + '%',\n            layer = {\n          position: 'absolute',\n          top: offset,\n          left: offset,\n          display: 'block',\n          width: size,\n          height: size,\n          margin: 0,\n          padding: 0,\n          background: '#fff',\n          border: 0,\n          opacity: 0\n        },\n            // Choose how to hide input\n        hide = _mobile ? {\n          position: 'absolute',\n          visibility: 'hidden'\n        } : area ? layer : {\n          position: 'absolute',\n          opacity: 0\n        },\n            // Get proper class\n        className = node[_type] == _checkbox ? settings.checkboxClass || 'i' + _checkbox : settings.radioClass || 'i' + _radio,\n            // Find assigned labels\n        label = $(_label + '[for=\"' + id + '\"]').add(self.closest(_label)),\n            // Check ARIA option\n        aria = !!settings.aria,\n            // Set ARIA placeholder\n        ariaID = _iCheck + '-' + Math.random().toString(36).replace('0.', ''),\n            // Parent & helper\n        parent = '<div class=\"' + className + '\" ' + (aria ? 'role=\"' + node[_type] + '\" ' : ''),\n            helper; // Set ARIA \"labelledby\"\n\n        if (label.length && aria) {\n          label.each(function () {\n            parent += 'aria-labelledby=\"';\n\n            if (this.id) {\n              parent += this.id;\n            } else {\n              this.id = ariaID;\n              parent += ariaID;\n            }\n\n            parent += '\"';\n          });\n        } // Wrap input\n\n\n        parent = self.wrap(parent + '/>')[_callback]('ifCreated').parent().append(settings.insert); // Layer addition\n\n        helper = $('<ins class=\"' + _iCheckHelper + '\"/>').css(layer).appendTo(parent); // Finalize customization\n\n        self.data(_iCheck, {\n          o: settings,\n          s: self.attr('style')\n        }).css(hide);\n        !!settings.inheritClass && parent[_add](node.className || '');\n        !!settings.inheritID && id && parent.attr('id', _iCheck + '-' + id);\n        parent.css('position') == 'static' && parent.css('position', 'relative');\n        operate(self, true, _update); // Label events\n\n        if (label.length) {\n          label.on(_click + '.i mouseover.i mouseout.i ' + _touch, function (event) {\n            var type = event[_type],\n                item = $(this); // Do nothing if input is disabled\n\n            if (!node[_disabled]) {\n              // Click\n              if (type == _click) {\n                if ($(event.target).is('a')) {\n                  return;\n                }\n\n                operate(self, false, true); // Hover state\n              } else if (labelHover) {\n                // mouseout|touchend\n                if (/ut|nd/.test(type)) {\n                  parent[_remove](hoverClass);\n\n                  item[_remove](labelHoverClass);\n                } else {\n                  parent[_add](hoverClass);\n\n                  item[_add](labelHoverClass);\n                }\n              }\n\n              if (_mobile) {\n                event.stopPropagation();\n              } else {\n                return false;\n              }\n            }\n          });\n        } // Input events\n\n\n        self.on(_click + '.i focus.i blur.i keyup.i keydown.i keypress.i', function (event) {\n          var type = event[_type],\n              key = event.keyCode; // Click\n\n          if (type == _click) {\n            return false; // Keydown\n          } else if (type == 'keydown' && key == 32) {\n            if (!(node[_type] == _radio && node[_checked])) {\n              if (node[_checked]) {\n                off(self, _checked);\n              } else {\n                on(self, _checked);\n              }\n            }\n\n            return false; // Keyup\n          } else if (type == 'keyup' && node[_type] == _radio) {\n            !node[_checked] && on(self, _checked); // Focus/blur\n          } else if (/us|ur/.test(type)) {\n            parent[type == 'blur' ? _remove : _add](focusClass);\n          }\n        }); // Helper events\n\n        helper.on(_click + ' mousedown mouseup mouseover mouseout ' + _touch, function (event) {\n          var type = event[_type],\n              // mousedown|mouseup\n          toggle = /wn|up/.test(type) ? activeClass : hoverClass; // Do nothing if input is disabled\n\n          if (!node[_disabled]) {\n            // Click\n            if (type == _click) {\n              operate(self, false, true); // Active and hover states\n            } else {\n              // State is on\n              if (/wn|er|in/.test(type)) {\n                // mousedown|mouseover|touchbegin\n                parent[_add](toggle); // State is off\n\n              } else {\n                parent[_remove](toggle + ' ' + activeClass);\n              } // Label hover\n\n\n              if (label.length && labelHover && toggle == hoverClass) {\n                // mouseout|touchend\n                label[/ut|nd/.test(type) ? _remove : _add](labelHoverClass);\n              }\n            }\n\n            if (_mobile) {\n              event.stopPropagation();\n            } else {\n              return false;\n            }\n          }\n        });\n      });\n    } else {\n      return this;\n    }\n  }; // Do something with inputs\n\n\n  function operate(input, direct, method) {\n    var node = input[0],\n        state = /er/.test(method) ? _indeterminate : /bl/.test(method) ? _disabled : _checked,\n        active = method == _update ? {\n      checked: node[_checked],\n      disabled: node[_disabled],\n      indeterminate: input.attr(_indeterminate) == 'true' || input.attr(_determinate) == 'false'\n    } : node[state]; // Check, disable or indeterminate\n\n    if (/^(ch|di|in)/.test(method) && !active) {\n      on(input, state); // Uncheck, enable or determinate\n    } else if (/^(un|en|de)/.test(method) && active) {\n      off(input, state); // Update\n    } else if (method == _update) {\n      // Handle states\n      for (var state in active) {\n        if (active[state]) {\n          on(input, state, true);\n        } else {\n          off(input, state, true);\n        }\n      }\n    } else if (!direct || method == 'toggle') {\n      // Helper or label was clicked\n      if (!direct) {\n        input[_callback]('ifClicked');\n      } // Toggle checked state\n\n\n      if (active) {\n        if (node[_type] !== _radio) {\n          off(input, state);\n        }\n      } else {\n        on(input, state);\n      }\n    }\n  } // Add checked, disabled or indeterminate state\n\n\n  function on(input, state, keep) {\n    var node = input[0],\n        parent = input.parent(),\n        checked = state == _checked,\n        indeterminate = state == _indeterminate,\n        disabled = state == _disabled,\n        callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',\n        regular = option(input, callback + capitalize(node[_type])),\n        specific = option(input, state + capitalize(node[_type])); // Prevent unnecessary actions\n\n    if (node[state] !== true) {\n      // Toggle assigned radio buttons\n      if (!keep && state == _checked && node[_type] == _radio && node.name) {\n        var form = input.closest('form'),\n            inputs = 'input[name=\"' + node.name + '\"]';\n        inputs = form.length ? form.find(inputs) : $(inputs);\n        inputs.each(function () {\n          if (this !== node && $(this).data(_iCheck)) {\n            off($(this), state);\n          }\n        });\n      } // Indeterminate state\n\n\n      if (indeterminate) {\n        // Add indeterminate state\n        node[state] = true; // Remove checked state\n\n        if (node[_checked]) {\n          off(input, _checked, 'force');\n        } // Checked or disabled state\n\n      } else {\n        // Add checked or disabled state\n        if (!keep) {\n          node[state] = true;\n        } // Remove indeterminate state\n\n\n        if (checked && node[_indeterminate]) {\n          off(input, _indeterminate, false);\n        }\n      } // Trigger callbacks\n\n\n      callbacks(input, checked, state, keep);\n    } // Add proper cursor\n\n\n    if (node[_disabled] && !!option(input, _cursor, true)) {\n      parent.find('.' + _iCheckHelper).css(_cursor, 'default');\n    } // Add state class\n\n\n    parent[_add](specific || option(input, state) || ''); // Set ARIA attribute\n\n\n    disabled ? parent.attr('aria-disabled', 'true') : parent.attr('aria-checked', indeterminate ? 'mixed' : 'true'); // Remove regular state class\n\n    parent[_remove](regular || option(input, callback) || '');\n  } // Remove checked, disabled or indeterminate state\n\n\n  function off(input, state, keep) {\n    var node = input[0],\n        parent = input.parent(),\n        checked = state == _checked,\n        indeterminate = state == _indeterminate,\n        disabled = state == _disabled,\n        callback = indeterminate ? _determinate : checked ? _unchecked : 'enabled',\n        regular = option(input, callback + capitalize(node[_type])),\n        specific = option(input, state + capitalize(node[_type])); // Prevent unnecessary actions\n\n    if (node[state] !== false) {\n      // Toggle state\n      if (indeterminate || !keep || keep == 'force') {\n        node[state] = false;\n      } // Trigger callbacks\n\n\n      callbacks(input, checked, callback, keep);\n    } // Add proper cursor\n\n\n    if (!node[_disabled] && !!option(input, _cursor, true)) {\n      parent.find('.' + _iCheckHelper).css(_cursor, 'pointer');\n    } // Remove state class\n\n\n    parent[_remove](specific || option(input, state) || ''); // Set ARIA attribute\n\n\n    disabled ? parent.attr('aria-disabled', 'false') : parent.attr('aria-checked', 'false'); // Add regular state class\n\n    parent[_add](regular || option(input, callback) || '');\n  } // Remove all traces\n\n\n  function tidy(input, callback) {\n    if (input.data(_iCheck)) {\n      // Remove everything except input\n      input.parent().html(input.attr('style', input.data(_iCheck).s || '')); // Callback\n\n      if (callback) {\n        input[_callback](callback);\n      } // Unbind events\n\n\n      input.off('.i').unwrap();\n      $(_label + '[for=\"' + input[0].id + '\"]').add(input.closest(_label)).off('.i');\n    }\n  } // Get some option\n\n\n  function option(input, state, regular) {\n    if (input.data(_iCheck)) {\n      return input.data(_iCheck).o[state + (regular ? '' : 'Class')];\n    }\n  } // Capitalize some string\n\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  } // Executable handlers\n\n\n  function callbacks(input, checked, callback, keep) {\n    if (!keep) {\n      if (checked) {\n        input[_callback]('ifToggled');\n      }\n\n      input[_callback]('ifChanged')[_callback]('if' + capitalize(callback));\n    }\n  }\n})(window.jQuery || window.Zepto);\n\n//# sourceURL=webpack:///./src/scripts/icheck.js?");

/***/ }),

/***/ "./src/scripts/index.js":
/*!******************************!*\
  !*** ./src/scripts/index.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bootstrap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrap.js */ \"./src/scripts/bootstrap.js\");\n/* harmony import */ var _bootstrap_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bootstrap_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _icheck_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icheck.js */ \"./src/scripts/icheck.js\");\n/* harmony import */ var _icheck_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_icheck_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _adminlte_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adminlte.js */ \"./src/scripts/adminlte.js\");\n/* harmony import */ var _adminlte_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_adminlte_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _custom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./custom.js */ \"./src/scripts/custom.js\");\n/* harmony import */ var _custom_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_custom_js__WEBPACK_IMPORTED_MODULE_3__);\n//import \"./chart.js\";\n//import \"./dashboard2.js\";\n\n\n\n\n\n//# sourceURL=webpack:///./src/scripts/index.js?");

/***/ })

/******/ });